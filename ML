# Importing necessary libraries
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Sample data for training the model
X = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).reshape(-1, 1)  # Input features (reshaped to a column vector)
y = np.array([2, 4, 5, 4, 6, 8, 9, 10, 12, 15])  # Target labels

# Step 1: Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 2: Create a Linear Regression model
model = LinearRegression()

# Step 3: Train the model using the training data
model.fit(X_train, y_train)

# Step 4: Make predictions using the trained model
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

# Step 5: Calculate the model's performance
train_rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))
train_r2 = r2_score(y_train, y_pred_train)
test_rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))
test_r2 = r2_score(y_test, y_pred_test)

# Step 6: Display the model's performance
print("Model Performance:")
print(f"Training RMSE: {train_rmse:.2f}")
print(f"Training R2 Score: {train_r2:.2f}")
print(f"Test RMSE: {test_rmse:.2f}")
print(f"Test R2 Score: {test_r2:.2f}")

# Step 7: Display the coefficients and intercept of the model
print("\nModel Coefficients:")
print("Coefficient (Slope):", model.coef_[0])
print("Intercept:", model.intercept_)

# Step 8: Predicting on new data
X_new = np.array([11, 12, 13]).reshape(-1, 1)  # New data for prediction
y_new_pred = model.predict(X_new)

# Step 9: Display the predictions on new data
print("\nPredictions on New Data:")
for x, y in zip(X_new, y_new_pred):
    print(f"Input: {x[0]}, Predicted Output: {y:.2f}")
